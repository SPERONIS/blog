{"meta":{"version":1,"warehouse":"5.0.1"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","path":"fancybox/jquery.fancybox.min.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","path":"fancybox/jquery.fancybox.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.6.4.min.js","path":"js/jquery-3.6.4.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/package.json","hash":"4bf95d52f77edf811f23f6d264a7493311a8d078","modified":1738763530093},{"_id":"node_modules/hexo-theme-landscape/scripts/fancybox.js","hash":"c857d7a5e4a5d71c743a009c5932bf84229db428","modified":1738763530093},{"_id":"node_modules/hexo-theme-landscape/languages/de-DE.yml","hash":"d29d1c4256b7ed9df42f511c2ff0a23ad5fd6c1f","modified":1738763530093},{"_id":"node_modules/hexo-theme-landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1738763530093},{"_id":"node_modules/hexo-theme-landscape/_config.yml","hash":"b608c1f1322760dce9805285a602a95832730a2e","modified":1738763530093},{"_id":"node_modules/hexo-theme-landscape/README.md","hash":"1a9b279e6dd29fd19245f913f0c4a316ffaa62db","modified":1738763530093},{"_id":"node_modules/hexo-theme-landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1738763530093},{"_id":"node_modules/hexo-theme-landscape/languages/en-GB.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1738763530093},{"_id":"node_modules/hexo-theme-landscape/languages/en-US.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1738763530093},{"_id":"node_modules/hexo-theme-landscape/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1738763530093},{"_id":"node_modules/hexo-theme-landscape/languages/es-ES.yml","hash":"7008a8fc91f18d2a735864817b8ebda30c7a2c66","modified":1738763530093},{"_id":"node_modules/hexo-theme-landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1738763530093},{"_id":"node_modules/hexo-theme-landscape/languages/fr-FR.yml","hash":"8d09dbdab00a30a2870b56f7c0a7ca7deafa7b88","modified":1738763530093},{"_id":"node_modules/hexo-theme-landscape/languages/en.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1738763530093},{"_id":"node_modules/hexo-theme-landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1738763530093},{"_id":"node_modules/hexo-theme-landscape/languages/hu-HU.yml","hash":"712d18664898fa21ba38d4973e90ef41a324ea25","modified":1738763530093},{"_id":"node_modules/hexo-theme-landscape/languages/hu.yml","hash":"284d557130bf54a74e7dcef9d42096130e4d9550","modified":1738763530093},{"_id":"node_modules/hexo-theme-landscape/languages/it-IT.yml","hash":"2cb6dc2fab9bd2dbe1c8bb869a9e8bf85a564fdd","modified":1738763530093},{"_id":"node_modules/hexo-theme-landscape/languages/ja-JP.yml","hash":"08481267e0c112e1f6855620f2837ec4c4a98bbd","modified":1738763530093},{"_id":"node_modules/hexo-theme-landscape/languages/it.yml","hash":"89b7d91306b2c1a0f3ac023b657bf974f798a1e8","modified":1738763530093},{"_id":"node_modules/hexo-theme-landscape/languages/ko-KR.yml","hash":"19209ad8f9d4057e8df808937f950eb265e1db69","modified":1738763530093},{"_id":"node_modules/hexo-theme-landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1738763530093},{"_id":"node_modules/hexo-theme-landscape/languages/mn-MN.yml","hash":"b9e5f3e7c0c2f779cf2cfded6db847b5941637ca","modified":1738763530093},{"_id":"node_modules/hexo-theme-landscape/languages/nl-NL.yml","hash":"5ebbc30021f05d99938f96dfff280392df7f91f0","modified":1738763530093},{"_id":"node_modules/hexo-theme-landscape/languages/mn.yml","hash":"2e7523951072a9403ead3840ad823edd1084c116","modified":1738763530093},{"_id":"node_modules/hexo-theme-landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1738763530093},{"_id":"node_modules/hexo-theme-landscape/languages/pt-PT.yml","hash":"0f852b6b228e6ea59aa3540574bb89b233f2a098","modified":1738763530093},{"_id":"node_modules/hexo-theme-landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1738763530093},{"_id":"node_modules/hexo-theme-landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1738763530093},{"_id":"node_modules/hexo-theme-landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1738763530093},{"_id":"node_modules/hexo-theme-landscape/languages/ru-RU.yml","hash":"360d11a28bb768afb1dd15f63fa7fd3a8cc547ee","modified":1738763530093},{"_id":"node_modules/hexo-theme-landscape/languages/th-TH.yml","hash":"ebfdba9bc4842c829473c1e6e4544344f182724d","modified":1738763530093},{"_id":"node_modules/hexo-theme-landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1738763530093},{"_id":"node_modules/hexo-theme-landscape/languages/th.yml","hash":"84a55b00aa01f03982be294e43c33a20e6d32862","modified":1738763530093},{"_id":"node_modules/hexo-theme-landscape/languages/zh-CN.yml","hash":"1efd95774f401c80193eac6ee3f1794bfe93dc5a","modified":1738763530093},{"_id":"node_modules/hexo-theme-landscape/languages/tr.yml","hash":"a1cdbfa17682d7a971de8ab8588bf57c74224b5b","modified":1738763530093},{"_id":"node_modules/hexo-theme-landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1738763530093},{"_id":"node_modules/hexo-theme-landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1738763530093},{"_id":"node_modules/hexo-theme-landscape/layout/layout.ejs","hash":"0d1765036e4874500e68256fedb7470e96eeb6ee","modified":1738763530093},{"_id":"node_modules/hexo-theme-landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1738763530093},{"_id":"node_modules/hexo-theme-landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1738763530093},{"_id":"node_modules/hexo-theme-landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1738763530093},{"_id":"node_modules/hexo-theme-landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1738763530093},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/after-footer.ejs","hash":"377d257d5d16e0158a4405c72401517b074fd7ff","modified":1738763530093},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/article.ejs","hash":"56597e951203dd662a6d2c817c7c4f1c920d4a25","modified":1738763530093},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive.ejs","hash":"7cb70a7a54f8c7ae49b10d1f37c0a9b74eab8826","modified":1738763530093},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/footer.ejs","hash":"3656eb692254346671abc03cb3ba1459829e0dce","modified":1738763530093},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/gauges-analytics.ejs","hash":"21a1e2a3907d1a3dad1cd0ab855fe6735f233c74","modified":1738763530093},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/google-analytics.ejs","hash":"2ea7442ea1e1a8ab4e41e26c563f58413b59a3d0","modified":1738763530093},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/head.ejs","hash":"f05bced793b0314d4f2ef0c993b3a51d0b7d203a","modified":1738763530093},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/header.ejs","hash":"6a5033d189554c9a6d42e2ef7952ae5c9742648e","modified":1738763530093},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1738763530093},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1738763530093},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1738763530093},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1738763530093},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/recent_posts.ejs","hash":"60c4b012dcc656438ff59997e60367e5a21ab746","modified":1738763530093},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1738763530093},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1738763530093},{"_id":"node_modules/hexo-theme-landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1738763530093},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1738763530093},{"_id":"node_modules/hexo-theme-landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1738763530093},{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","hash":"e55a1d92954ed20f6887f92dc727bb995a010a43","modified":1738763530093},{"_id":"node_modules/hexo-theme-landscape/source/css/_variables.styl","hash":"ca28281423ae57d76b6c1eb91cd845fd4e518bd6","modified":1738763530093},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1738763530093},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1738763530093},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/date.ejs","hash":"f1458584b679545830b75bef2526e2f3eb931045","modified":1738763530093},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1738763530093},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1738763530093},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1738763530093},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/title.ejs","hash":"4d7e62574ddf46de9b41605fe3140d77b5ddb26d","modified":1738763530093},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1738763530093},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1738763530093},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","hash":"49773efcb2221bbdf2d86f3f5c5ff2d841b528cc","modified":1738763530093},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/article.styl","hash":"2d1f6f79ebf9cb55ebdb3865a2474437eb2b37c6","modified":1738763530093},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/header.styl","hash":"268d2989acb06e2ddd06cc36a6918c6cd865476b","modified":1738763530093},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1738763530093},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1738763530093},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/highlight.styl","hash":"9cc3b2927d814f2f6e8e188f9d3657b94f4c6ef3","modified":1738763530093},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1738763530093},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1738763530093},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1738763530093},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1738763530093},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.6.4.min.js","hash":"eda46747c71d38a880bee44f9a439c3858bb8f99","modified":1738763530093},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1738763530093},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1738763530093},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1738763530093},{"_id":"source/_posts/page1.md","hash":"eab52d524a6d9b1c5752bacebee457bfadbf2871","modified":1739070315820},{"_id":"public/2025/02/05/page1/index.html","hash":"09dee231f1f8ededab240b139a94857d34d0d2ee","modified":1738764465892},{"_id":"public/2025/02/05/hello-world/index.html","hash":"f0e61554a05d381c618550b72229738534883c46","modified":1738764465892},{"_id":"public/archives/index.html","hash":"cf4243591f82512f427912961c141146635e6c29","modified":1738764465892},{"_id":"public/archives/2025/index.html","hash":"d05115e43903d3e9f87950d87e0b8162bd85bf7f","modified":1738764465892},{"_id":"public/archives/2025/02/index.html","hash":"15e382e09bd603dff95403fffbfd6b900201a81c","modified":1738764465892},{"_id":"public/index.html","hash":"3b780749835622f66894865f0442d93b4bdb4922","modified":1738764465892},{"_id":"public/css/style.css","hash":"ddb3792605d744ab3d9f0a649c82b62e9b16daa6","modified":1738764465892},{"_id":"public/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1738764465892},{"_id":"public/js/script.js","hash":"49773efcb2221bbdf2d86f3f5c5ff2d841b528cc","modified":1738764465892},{"_id":"public/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1738764465892},{"_id":"public/js/jquery-3.6.4.min.js","hash":"eda46747c71d38a880bee44f9a439c3858bb8f99","modified":1738764465892},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1738764465892},{"_id":"themes/magiclamp/source/css/_mixins/Mala.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1739073615882},{"_id":"themes/magiclamp/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1739073615933},{"_id":"themes/magiclamp/source/css/_mixins/default.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1739073615954},{"_id":"themes/magiclamp/source/css/_variables/default.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1739073616223},{"_id":"themes/magiclamp/source/css/_common/_page/home.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1739073615540},{"_id":"themes/magiclamp/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1739073613065},{"_id":"themes/magiclamp/.gitignore","hash":"088ca1488c4716a81376838361ecccb252c0e086","modified":1739073613103},{"_id":"themes/magiclamp/_config.yml","hash":"abdf1a35267601fb3493b1b834e06fda4a85030b","modified":1739073613200},{"_id":"themes/magiclamp/.bowerrc","hash":"80e096fdc1cf912ee85dd9f7e6e77fd40cf60f10","modified":1739073613027},{"_id":"themes/magiclamp/.jshintrc","hash":"12c5e37da3432bee2219ed1c667076d54f1639c0","modified":1739073613134},{"_id":"themes/magiclamp/scripts/merge-configs.js","hash":"dfd147d1317e56d283f5e779f00608e913603b51","modified":1739073614727},{"_id":"themes/magiclamp/bower.json","hash":"27d780cb53ab549f3d0a4317c7f6f1a4916d3cd5","modified":1739073613234},{"_id":"themes/magiclamp/README.md","hash":"cf055d8741d93d60c92256acf89af53040baf15f","modified":1739073613166},{"_id":"themes/magiclamp/layout/index.swig","hash":"fdc801f0da71a2eb205ce9c0b12f156b219fdc9c","modified":1739073613638},{"_id":"themes/magiclamp/layout/category.swig","hash":"d6b3e1dc5e0b8deade9a084c463126e70188ee9b","modified":1739073613607},{"_id":"themes/magiclamp/layout/archive.swig","hash":"0c3ce594759f347ea90a4ce592a7a18e2ae4cc5c","modified":1739073613570},{"_id":"themes/magiclamp/layout/page.swig","hash":"beb1fc9a4e35b602a18b59f895544c6a838a67f2","modified":1739073613666},{"_id":"themes/magiclamp/languages/default.yml","hash":"7e65ef918f16d0189055deb5f1616b9dedcb1920","modified":1739073613296},{"_id":"themes/magiclamp/layout/post.swig","hash":"e54e099d36acdcd668408e51f084829b3697bf84","modified":1739073613692},{"_id":"themes/magiclamp/languages/en.yml","hash":"7e65ef918f16d0189055deb5f1616b9dedcb1920","modified":1739073613320},{"_id":"themes/magiclamp/languages/fr-FR.yml","hash":"6d097445342a9fb5235afea35d65bf5271b772f0","modified":1739073613349},{"_id":"themes/magiclamp/languages/de.yml","hash":"7a8de0e5665c52a1bf168c1e7dd222c8a74fb0ab","modified":1739073613267},{"_id":"themes/magiclamp/layout/tag.swig","hash":"aab44af54fcbc66fea4ad12b2767ffca3eadd451","modified":1739073613725},{"_id":"themes/magiclamp/layout/_layout.swig","hash":"3eabee7f901645e6287a13ef8f21b380917a75bf","modified":1739073613526},{"_id":"themes/magiclamp/languages/zh-hk.yml","hash":"3fc38103c9efa6f6c37149adbddb014ff85ec849","modified":1739073613437},{"_id":"themes/magiclamp/languages/zh-tw.yml","hash":"8897a06e521b36c7a1226c72057c8357611eded8","modified":1739073613466},{"_id":"themes/magiclamp/languages/ru.yml","hash":"b4a827b9ddac9d5f6dca096fe513aeafb46a3e93","modified":1739073613379},{"_id":"themes/magiclamp/languages/zh-Hans.yml","hash":"8af76df5557561050a950bdd7091d3bb3939c5c0","modified":1739073613408},{"_id":"themes/magiclamp/scripts/tags/center-quote.js","hash":"37274f743c2054244dcbbde56fba9ff353414281","modified":1739073614760},{"_id":"themes/magiclamp/scripts/tags/full-image.js","hash":"0d69739d1bad5861a4a6ff2db511c3669783e438","modified":1739073614791},{"_id":"themes/magiclamp/test/.jshintrc","hash":"096ed6df627373edd820f24d46b8baf528dee61d","modified":1739073618666},{"_id":"themes/magiclamp/layout/_macro/post.swig","hash":"bff30a2ce76227d01c0e9442c86ac766d64dea42","modified":1739073613785},{"_id":"themes/magiclamp/layout/_macro/post-collapse.swig","hash":"42927bdde998cefd3cf4f19b0476d69bd9e5116a","modified":1739073613756},{"_id":"themes/magiclamp/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1739073618739},{"_id":"themes/magiclamp/layout/_macro/sidebar.swig","hash":"7af60c855c060c5318df7264eb6860a7fbb7c3ce","modified":1739073613814},{"_id":"themes/magiclamp/test/helpers.js","hash":"7c8b0c7213ae06ec4e7948971f9b12842207b5c7","modified":1739073618705},{"_id":"themes/magiclamp/layout/_partials/footer.swig","hash":"204f7ef92d5e2fa1a8c28ec96e7e2c95ffb7fba1","modified":1739073613848},{"_id":"themes/magiclamp/layout/_partials/old-browsers.swig","hash":"dbbfea810bf3a2ed9c83b9a6683037175aacfc67","modified":1739073613948},{"_id":"themes/magiclamp/layout/_partials/pagination.swig","hash":"d6c7f04eee4388d8f133eb5526b7c0875c321a30","modified":1739073613975},{"_id":"themes/magiclamp/layout/_partials/header.swig","hash":"e66b8fca801d5daba31496d4b00bac3018b7c29b","modified":1739073613918},{"_id":"themes/magiclamp/layout/_partials/head.swig","hash":"fc9ab6752cbdd13f563b3969d039ef7cf05ab046","modified":1739073613887},{"_id":"themes/magiclamp/layout/_partials/search.swig","hash":"64f14da26792a17bc27836c4e9d83190175f36e6","modified":1739073614004},{"_id":"themes/magiclamp/layout/_scripts/analytics.swig","hash":"0ebbf76c2317faa8ba31365adba59331c2e0262c","modified":1739073614329},{"_id":"themes/magiclamp/layout/_scripts/bootstrap.scrollspy.swig","hash":"85295f126836b95f0837d03e58228bb3cf8c4490","modified":1739073614358},{"_id":"themes/magiclamp/layout/_scripts/fancy-box.swig","hash":"41b4ff1446060c88c33bf666a32277dcf12129f0","modified":1739073614387},{"_id":"themes/magiclamp/layout/_scripts/helpers.swig","hash":"4d2cbfca0aaf546a2b5813288073e824c1498fdf","modified":1739073614416},{"_id":"themes/magiclamp/layout/_scripts/motion.swig","hash":"817705bfd1a1282cb6bf59094afe507e11455aa0","modified":1739073614488},{"_id":"themes/magiclamp/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1739073616998},{"_id":"themes/magiclamp/source/css/main.styl","hash":"151dccbe683e6a858d8a6ea09df913a2344b417f","modified":1739073614828},{"_id":"themes/magiclamp/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1739073617029},{"_id":"themes/magiclamp/layout/_scripts/mathjax.swig","hash":"abc52fefb276c52cbb19de5c214521dfcf2a10fd","modified":1739073614458},{"_id":"themes/magiclamp/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1739073617094},{"_id":"themes/magiclamp/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1739073617062},{"_id":"themes/magiclamp/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1739073617158},{"_id":"themes/magiclamp/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1739073617125},{"_id":"themes/magiclamp/source/images/default_avatar.jpg","hash":"32a3fd9d1f39099748021c93fb2fbaa0cb707788","modified":1739073617215},{"_id":"themes/magiclamp/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1739073617190},{"_id":"themes/magiclamp/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1739073617239},{"_id":"themes/magiclamp/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1739073617262},{"_id":"themes/magiclamp/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1739073617286},{"_id":"themes/magiclamp/source/js/fancy-box.js","hash":"b382ba746f4566682948ce92f2588ee940cd1755","modified":1739073617358},{"_id":"themes/magiclamp/source/js/helpers.js","hash":"7499b413242a2e75a9308444aade5b72a12cce7d","modified":1739073617392},{"_id":"themes/magiclamp/source/js/bootstrap.scrollspy.js","hash":"ae7bdce88b515aade4eea8bf7407eec458bcd625","modified":1739073617328},{"_id":"themes/magiclamp/source/js/motion_fallback.js","hash":"a767d522c65a8b2fbad49135c9332135c6785c3e","modified":1739073617473},{"_id":"themes/magiclamp/source/js/nav-toggle.js","hash":"78b59f1beb12adea0d7f9bcf4377cb699963f220","modified":1739073617540},{"_id":"themes/magiclamp/source/js/lazyload.js","hash":"b92e9acdc7afc15468314c03f4a643b0c93944cf","modified":1739073617442},{"_id":"themes/magiclamp/source/js/motion_global.js","hash":"fea8cbb854601b7aee14e51079b3e3f80a1de261","modified":1739073617510},{"_id":"themes/magiclamp/layout/_partials/search/swiftype.swig","hash":"00c2b49f6289198b0b2b4e157e4ee783277f32a7","modified":1739073614046},{"_id":"themes/magiclamp/layout/_partials/search/tinysou.swig","hash":"2f92046e0b50ebd65abb7045b1cbbfc50abbb034","modified":1739073614086},{"_id":"themes/magiclamp/layout/_partials/share/baidu_share.swig","hash":"b4506174e385ee5fb1c94122b45732e3413a0ba2","modified":1739073614130},{"_id":"themes/magiclamp/source/js/ua-parser.min.js","hash":"acf0ee6a47ffb7231472b56e43996e3f947c258a","modified":1739073617583},{"_id":"themes/magiclamp/layout/_partials/share/jiathis.swig","hash":"63315fcf210799f894208c9f512737096df84962","modified":1739073614165},{"_id":"themes/magiclamp/layout/_partials/suprise/donate.swig","hash":"25f196afc193a7b192a49cb7d84db7d727a9e8c2","modified":1739073614297},{"_id":"themes/magiclamp/layout/_partials/suprise/assist.swig","hash":"6b8a25353dbfe9f92e0d48388a6f46996e03b7cb","modified":1739073614217},{"_id":"themes/magiclamp/layout/_scripts/analytics/busuanzi.swig","hash":"dee5f8ce80fc34fa2b0c914a45465c79da80612b","modified":1739073614555},{"_id":"themes/magiclamp/layout/_scripts/analytics/baidu-analytics.swig","hash":"7c43d66da93cde65b473a7d6db2a86f9a42647d6","modified":1739073614526},{"_id":"themes/magiclamp/source/css/_custom/Mala.styl","hash":"c19d4c71ec20cdfd3ad1cf6aaa236f05d3627324","modified":1739073615856},{"_id":"themes/magiclamp/layout/_scripts/analytics/google-analytics.swig","hash":"30a23fa7e816496fdec0e932aa42e2d13098a9c2","modified":1739073614592},{"_id":"themes/magiclamp/layout/_scripts/comments/disqus.swig","hash":"fc017d9e12a84d66e9bb15da32a9d27f1cb0e4f3","modified":1739073614636},{"_id":"themes/magiclamp/source/css/_mixins/base.styl","hash":"66985fe77bd323f7f8f634908e17166f51e96e95","modified":1739073615912},{"_id":"themes/magiclamp/source/css/_variables/Mala.styl","hash":"360aaa1746bc4032079493ff6027f8431f65b6df","modified":1739073616119},{"_id":"themes/magiclamp/source/css/_variables/custom.styl","hash":"1a3e002602b0dff287b2463d2cd25c22f349a145","modified":1739073616201},{"_id":"themes/magiclamp/source/fonts/icon-default/icomoon.eot","hash":"90763e97be18be78e65749075225cceeddc6fa8a","modified":1739073616262},{"_id":"themes/magiclamp/source/fonts/icon-default/icomoon.svg","hash":"f92ad8cddc250f0bb5ca466fca95d321987e127e","modified":1739073616295},{"_id":"themes/magiclamp/source/fonts/icon-default/icomoon.ttf","hash":"c093408e6030221cafc1f79d897f1fb5283c1178","modified":1739073616327},{"_id":"themes/magiclamp/layout/_scripts/pages/post-details.swig","hash":"b63ef233886538f30ced60344ac15d25e5f3e0af","modified":1739073614700},{"_id":"themes/magiclamp/source/fonts/icon-default/icomoon.woff","hash":"dbe0368f2a65d87b13234cfea29d9783892fc7a8","modified":1739073616356},{"_id":"themes/magiclamp/source/fonts/icon-feather/icomoon.eot","hash":"11554b9e9d5b9f535ba96cbb27d45d8c8f1689fd","modified":1739073616413},{"_id":"themes/magiclamp/source/fonts/icon-default/selection.json","hash":"dc07c29f687315f9458f6b251c214768af865fb2","modified":1739073616382},{"_id":"themes/magiclamp/source/fonts/icon-feather/icomoon.svg","hash":"d5eb756eefda9b454dcb23c2b1cefd4051d18d41","modified":1739073616445},{"_id":"themes/magiclamp/source/css/_variables/base.styl","hash":"c2b1f0f231dcbda4752712240c49134b211b6922","modified":1739073616171},{"_id":"themes/magiclamp/source/fonts/icon-feather/icomoon.woff","hash":"2ea1c59c17422798e64ee6f4e9ce1f7aff1a06a5","modified":1739073616501},{"_id":"themes/magiclamp/source/fonts/icon-feather/icomoon.ttf","hash":"b2bbae4b613403cf61ad25037913378da1c07b8f","modified":1739073616474},{"_id":"themes/magiclamp/source/fonts/icon-feather/selection.json","hash":"06ea91e3f98ebe1080087acad4356802bc5b6ebf","modified":1739073616529},{"_id":"themes/magiclamp/source/fonts/icon-fifty-shades/icomoon.ttf","hash":"72fe82e1f3db52414eed706952d385af241cb196","modified":1739073616622},{"_id":"themes/magiclamp/source/fonts/icon-fifty-shades/icomoon.eot","hash":"da86ba5df72d1288de9e9633e5f528062dd427d5","modified":1739073616560},{"_id":"themes/magiclamp/source/fonts/icon-fifty-shades/icomoon.svg","hash":"1a4afd739e1f8eb8d430dbdd29e36a9999802e8d","modified":1739073616592},{"_id":"themes/magiclamp/source/fonts/icon-icomoon/icomoon.eot","hash":"301fcf00c24750dddf1c529f944ca62c7f1a217d","modified":1739073616708},{"_id":"themes/magiclamp/source/fonts/icon-fifty-shades/icomoon.woff","hash":"4de6a74f523dee33d95dde61caae5809f9a5d448","modified":1739073616649},{"_id":"themes/magiclamp/source/fonts/icon-icomoon/icomoon.svg","hash":"e316347805eb93425faa678611c5e42a7152da8f","modified":1739073616740},{"_id":"themes/magiclamp/source/fonts/icon-fifty-shades/selection.json","hash":"fdd09098d1c3688e2c88cf33fd51e76b383b6d7f","modified":1739073616677},{"_id":"themes/magiclamp/source/fonts/icon-icomoon/icomoon.ttf","hash":"f399713d1c9400d4d3373e38991a7e362a754a94","modified":1739073616771},{"_id":"themes/magiclamp/source/fonts/icon-linecons/icomoon.ttf","hash":"078068206684e4f185b0187ad3cee16f54a287d7","modified":1739073616891},{"_id":"themes/magiclamp/source/fonts/icon-icomoon/icomoon.woff","hash":"05f1ec0bd307da5e731a86eb4961589a6042aebb","modified":1739073616799},{"_id":"themes/magiclamp/source/fonts/icon-linecons/icomoon.eot","hash":"e2d7f040428a632f3c50bfa94083b759936effc2","modified":1739073616830},{"_id":"themes/magiclamp/source/fonts/icon-linecons/icomoon.woff","hash":"0b07ee6ceda3b1bceb40c1e7379b3aa48dcc15a8","modified":1739073616919},{"_id":"themes/magiclamp/source/vendors/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1739073618101},{"_id":"themes/magiclamp/source/fonts/icon-linecons/icomoon.svg","hash":"808eaf7d61f7e67c76976265c885e79c36920f0b","modified":1739073616862},{"_id":"themes/magiclamp/source/vendors/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1739073618192},{"_id":"themes/magiclamp/source/vendors/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1739073618128},{"_id":"themes/magiclamp/source/vendors/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1739073618163},{"_id":"themes/magiclamp/source/vendors/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1739073618312},{"_id":"themes/magiclamp/source/fonts/icon-linecons/selection.json","hash":"db4ce25d31449ecc6685b32e145252103967bb5c","modified":1739073616961},{"_id":"themes/magiclamp/source/vendors/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1739073618448},{"_id":"themes/magiclamp/source/vendors/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1739073618421},{"_id":"themes/magiclamp/source/vendors/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1739073618595},{"_id":"themes/magiclamp/source/css/_common/_component/back-to-top.styl","hash":"88cd66910260006aa8e9e795df4948d4b67bfa11","modified":1739073614869},{"_id":"themes/magiclamp/source/vendors/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1739073618555},{"_id":"themes/magiclamp/source/vendors/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1739073618634},{"_id":"themes/magiclamp/source/css/_common/_component/buttons.styl","hash":"81063e0979f04a0f9af37f321d7321dda9abf593","modified":1739073614896},{"_id":"themes/magiclamp/source/css/_common/_component/comments.styl","hash":"b468e452f29df359957731ee8846e165aef13b3d","modified":1739073614924},{"_id":"themes/magiclamp/source/css/_common/_component/gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1739073614983},{"_id":"themes/magiclamp/source/css/_common/_component/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1739073615011},{"_id":"themes/magiclamp/source/css/_common/_component/duoshuo.styl","hash":"c307f1e4827d7cb82816a5f9de109ae14ed4199c","modified":1739073614955},{"_id":"themes/magiclamp/source/css/_common/_component/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1739073615154},{"_id":"themes/magiclamp/source/css/_common/_component/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1739073615040},{"_id":"themes/magiclamp/source/css/_common/_component/posts-collapse.styl","hash":"8f9e8f5f65956ccf1d52ff8526392803dff579d3","modified":1739073615068},{"_id":"themes/magiclamp/source/css/_common/_component/posts-expand.styl","hash":"e5d24cc3b5486d1c24080161f2ea1d44e6bbcbb9","modified":1739073615098},{"_id":"themes/magiclamp/source/css/_common/_fonts/icon-fifty-shades.styl","hash":"249f75bafa26b99d272352c0646e7497ea680b39","modified":1739073615397},{"_id":"themes/magiclamp/source/css/_common/_fonts/icon-feather.styl","hash":"80413afacfa656322100ce1900fed1ebcd8f8f44","modified":1739073615369},{"_id":"themes/magiclamp/source/css/_common/_fonts/icon-default.styl","hash":"8b809aef383bebaeb3f282b47675f3a364ce3569","modified":1739073615338},{"_id":"themes/magiclamp/source/css/_common/_fonts/icon-font.styl","hash":"ec3f86739bede393cafcd3e31052c01115ae20d6","modified":1739073615428},{"_id":"themes/magiclamp/source/css/_common/_component/posts-type.styl","hash":"40b593134bf96d1d6095b3439d47820659d7f10b","modified":1739073615128},{"_id":"themes/magiclamp/source/css/_common/_core/base.styl","hash":"e79a08484b191dca14ccfc005053eb95786dafae","modified":1739073615188},{"_id":"themes/magiclamp/source/css/_common/_fonts/icon-linecons.styl","hash":"9cdbedb3627ac941cfb063b152abe5a75c3c699a","modified":1739073615457},{"_id":"themes/magiclamp/source/css/_common/_core/helpers.styl","hash":"41a31d651b60b4f458fc56a1d191dfbbdcb6d794","modified":1739073615218},{"_id":"themes/magiclamp/source/css/_common/_core/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1739073615246},{"_id":"themes/magiclamp/source/css/_common/_core/tables.styl","hash":"f142a185fda68bc579e89ead9a31bc8fa0f3ca8c","modified":1739073615303},{"_id":"themes/magiclamp/source/css/_common/_core/scaffolding.styl","hash":"584c636707e0c8bfd6efc936c1b3a0d35d14f29d","modified":1739073615276},{"_id":"themes/magiclamp/source/css/_common/_page/archive.styl","hash":"dff879f55ca65fa79c07e9098719e53eeea7ac88","modified":1739073615490},{"_id":"themes/magiclamp/source/css/_common/_page/post-detail.styl","hash":"73796f6f13caa7151a2ee8e55755627e0d189f55","modified":1739073615567},{"_id":"themes/magiclamp/source/css/_common/_page/categories.styl","hash":"4f696a2eaeee2f214adcf273eab25c62a398077a","modified":1739073615519},{"_id":"themes/magiclamp/source/css/_common/_section/body.styl","hash":"ca1a4766cbe25baac757c6b47a4858d221afdc40","modified":1739073615601},{"_id":"themes/magiclamp/source/css/_common/_section/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1739073615629},{"_id":"themes/magiclamp/source/css/_common/_section/media.styl","hash":"fa9809d2ecc753cf32f70803c1d0821c405211f4","modified":1739073615716},{"_id":"themes/magiclamp/source/css/_common/_section/layout.styl","hash":"4daaadd156ece64ae05908ad6bb0159c8a27c071","modified":1739073615688},{"_id":"themes/magiclamp/source/css/_common/_section/header.styl","hash":"ba501332fb111bd72dc0777f2e1c8a29ad538ff9","modified":1739073615659},{"_id":"themes/magiclamp/source/css/_common/_section/sidebar.styl","hash":"19ba3653e45187c064bbaf8142c2596a83ae7b08","modified":1739073615748},{"_id":"themes/magiclamp/source/css/_schemes/default/_menu.styl","hash":"4bba29cece65ffc5122f4e052063dea4439fe4ae","modified":1739073616029},{"_id":"themes/magiclamp/source/css/_schemes/default/index.styl","hash":"2588e55132e10d82c0608f03c2c72a2bace8fa4e","modified":1739073616086},{"_id":"themes/magiclamp/source/vendors/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1739073617648},{"_id":"themes/magiclamp/source/css/_schemes/default/_search.styl","hash":"c524bccdc554349106d1c8be9c3f275d4c0d4281","modified":1739073616058},{"_id":"themes/magiclamp/source/css/_schemes/Mala/index.styl","hash":"b2c5e70968c381ba9af79247aac4ef2891b0015c","modified":1739073615996},{"_id":"themes/magiclamp/source/vendors/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1739073617673},{"_id":"themes/magiclamp/source/vendors/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1739073617624},{"_id":"themes/magiclamp/source/vendors/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1739073617697},{"_id":"themes/magiclamp/source/vendors/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1739073617722},{"_id":"themes/magiclamp/source/vendors/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1739073617746},{"_id":"themes/magiclamp/source/vendors/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1739073617779},{"_id":"themes/magiclamp/source/vendors/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1739073618237},{"_id":"themes/magiclamp/source/vendors/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1739073617821},{"_id":"themes/magiclamp/source/vendors/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1739073617866},{"_id":"themes/magiclamp/source/vendors/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1739073618277},{"_id":"themes/magiclamp/source/css/_common/_vendor/highlight/highlight.styl","hash":"f3529b7da284c4b859429573c9b1004d32937e40","modified":1739073615790},{"_id":"themes/magiclamp/source/vendors/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1739073617896},{"_id":"themes/magiclamp/source/css/_common/_vendor/highlight/theme.styl","hash":"ae19721ceee5ba460e131cb2427dae3c1ff39d6f","modified":1739073615821},{"_id":"themes/magiclamp/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1739073617929},{"_id":"themes/magiclamp/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1739073618028},{"_id":"themes/magiclamp/source/vendors/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1739073618388},{"_id":"themes/magiclamp/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1739073617963},{"_id":"themes/magiclamp/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1739073617998},{"_id":"themes/magiclamp/layout/_partials/suprise/ball.swig","hash":"2c18d2cb89a054068fd04a9cf81c28fe3ac48120","modified":1739073614261},{"_id":"themes/magiclamp/source/vendors/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1739073618500},{"_id":"themes/magiclamp/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1739073618067},{"_id":"source/_posts/web 视频播放一杆到底.md","hash":"4d11d663c7e5b48323dcf4dc1dc9b809fb6e155a","modified":1739075062722}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2025-02-05T13:50:09.887Z","updated":"1985-10-26T08:15:00.000Z","comments":1,"layout":"post","photos":[],"_id":"cm6rz6dua0000zksy4h7ydo7y","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"page1","date":"2025-02-05T14:00:46.000Z","_content":"","source":"_posts/page1.md","raw":"---\ntitle: page1\ndate: 2025-02-05 22:00:46\ntags: 视野分享\n---\n","slug":"page1","published":1,"updated":"2025-02-09T05:20:25.223Z","_id":"cm6rz8xo70000nwsydwkz6r1p","comments":1,"layout":"post","photos":[],"content":"","excerpt":"","more":""},{"title":"web视频播放一杆到底","date":"2020-12-09T04:24:22.000Z","_content":"## 前言\n毫无疑问，现在是短视频、直播的时代。视频内容逐渐代替图文形式成为网友们获取新鲜事物以及展现自我的一大媒介。随着5G的到来，2020年属于直播短视频爆发式增长的一年，电商平台也都涌入直播营销的大风口，成为了各自平台引流转化的关键。不管是用户还是开发者，我们处于这个风口中。本文将带你探索浏览器视频播放的奥秘。\n\n## 视频的构成\n一个完整可播放的视频文件是由视频和音频两部分构成。视频和音频又有各自的封装格式（容器）和编码格式。\n1. **编码格式**：常见的视频编码格式有：MPEG4、H.264、H.265 等。常见的音频编码格式有：MP3、AAC、WAV 等。\n2. **封装格式**：常见的视频封装格式有：MP4、FLV、mov、AVI、RMVB 等。\n\n## 先理解几个名词\n1. **帧**：就是影像动画中的最小单位的影像画面。一帧就是一张静止的图像。视频中的动画就是由多幅连续的帧画面构成。\n2. **帧率**：帧率是以帧为单位的图像在显示器上出现的频率，也叫帧速率，单位：赫兹（Hz）。简单理解为每秒播放图片的数量。\n3. **码率**：码率是比特率的俗称，是指每秒传送的比特数。\n4. **FFmpeg**：FFmpeg 是可以用来记录、转换数字视频和音频的一套计算机程序。FFmpeg 是在 linux 下开发，所以天生跨平台。它对音视频编码格式的支持比较全面，能对视频的各个组成部分进行编码。\n5. **H264**：通常被称之为 H.264/AVC；是由国际标准化组织和国际电信联盟共同提出的继MPEG4之后的新一代数字视频压缩格式。采用 H.264 压缩后的数据具有低码率、高质量图像、容错能力强、网络适应性强等优点。\n6. **MP4**：MP4 是一种标准的数字多媒体容器格式；用于音频、视频的压缩编码，也可以存储字幕和静止图像，同时能以流的方式进行网络传输。\n7. **fMP4（Fragmented MP4）**：fMP4 是基于 MPEG-4 Part 12 的流媒体格式，与 MP4 很相似。简单来说 fMP4 区别于 MP4 最大的区别就是它能很好地适应流式播放。\n\n## 浏览器播放视频\n1. **video标签播放**：在浏览器播放视频，可以使用 HTML5 原生的 video 标签。但其播放的格式使用一定限制的，目前 video 只支持三种格式 WebM、Ogg、MP4。\n    - WebM：WebM 文件使用 VP8 视频编解码器和 Vorbis 音频编解码器\n    - Ogg：Ogg 文件使用 Theora 视频编解码器和 Vorbis 音频编解码器\n    - MP4：MPEG 4 文件使用 H264 视频编解码器和 AAC 音频编解码器\n    ```html\n        <video id=\"video-box\" src=\"//cloud.video.taobao.com/play/u/755731755/p/1/e/6/t/1/283631891407.mp4\" controls width=\"400px\" heigt=\"400px\"></video>\n    ```\n    在页面初始化完成后，video 标签会将整个 mp4 文件下载到浏览器，完成后即可播放。但是当 mp4 文件较大时，缓存时间就比较长，播放体验不好。当然也可以使用 **video.js** 来播放，这里就不赘述了。\n\n2. **播放HLS流**：HLS（HTTP Live Streaming）是一个由 Apple 公司提出的基于 HTTP 的流媒体传输协议。视频的封装格式是 TS，编码格式是 H.264/ACC，除了定义 TS 视频文件本身，还定义了用来控制播放的m3u8 文本文件。移动端大部分浏览器都支持，也就是说，你可以在移动端浏览器直接使用 vedio 标签直接加载一个 m3u8 文件播放视频或者直播。但在 PC 端只支持苹果的 safari 浏览器，其他浏览器想播放需要引入第三方库，如：hls.js：\n    ```html\n        <script src=\"https://cdn.jsdelivr.net/npm/hls.js\"></script>\n        <video id=\"video\"></video>\n        <script>\n        var video = document.getElementById('video');\n        var videoSrc = 'https://test-streams.mux.dev/x36xhzz/x36xhzz.m3u8';\n        if (Hls.isSupported()) {\n            var hls = new Hls();\n            hls.loadSource(videoSrc);\n            hls.attachMedia(video);\n            hls.on(Hls.Events.MANIFEST_PARSED, function() {\n                video.play();\n                });\n        }\n        </script>\n    ```\n播放 HLS 流的逻辑很简单，首先根据提供的 m3u8 地址源通过 HTTP 请求获取到一级 index 文件内容，例如：\n    ```nginx\n        #EXTM3U\n        #EXT-X-STREAM-INF:PROGRAM-ID=1,BANDWIDTH=64000\n        500kbps.m3u8\n        #EXT-X-STREAM-INF:PROGRAM-ID=1,BANDWIDTH=774000\n        1000kbps.m3u8\n        #EXT-X-STREAM-INF:PROGRAM-ID=1,BANDWIDTH=887000\n        500kbps.m3u8\n        #EXT-X-STREAM-INF:PROGRAM-ID=1,BANDWIDTH=7692000\n        1000kbps.m3u8\n    ```\n`bandwidth` 指定视频流的码率，每一个 `#EXT-X-STEAM-INF` 的下一行是二级 index 文件的路径，可以是相对路径或者是绝对路径。请求到的二级文件内容如下：\n\n    ```nginx    \n        #EXTM3U\n        #EXT-X-PLAYLIST-TYPE:VOD\n        #EXT-X-TARGETDURATION:10\n        #EXTINF:10,\n        1000kbps-00001.ts\n        #EXTINF:10,\n        1000kbps-00002.ts\n        #EXTINF:10,\n        1000kbps-00003.ts\n        #EXTINF:10,\n        1000kbps-00004.ts\n        #EXTINF:10,\n        ... ...\n        #EXT-X-ENDLIST\n     ```\n可以从二级文件中读取到 ts 文件的路径，同样可以是相对路径或者绝对路径。`#EXTINF` 表示每个 ts 切片的时长。`#EXT-X-ENDLIST` 是视频结束标志，如果有这个标志也表明该流不是一个直播流。\n\n    - **HLS播放的优势**：可以使用 http 协议请求数据流；可以切换不同的码率，实现无缝播放\n    - **劣势**：延迟较高，实时性差，一般延迟在 10s 以上，不适合做直播；ts 文件切片小且多，对存储和缓存都有一定的要求\n\n3. **播放FLV流**：FLV（Flash Video）是一种网络视频格式，FLV只能基于 flash 播放，但是由于 flash 存在很多安全问题已经被众多厂商抛弃，现在我们如果要在 H5 中播放 flv 格式的视频流可以使用 Blibli 的开源库：Flv.js，`flv.js`原理是解析视频的flv流并实时转换为 fmp4 格式，再通过 Media Source Extension 喂给浏览器的 `video` 标签。\n    ```html\n        <script src=\"flv.min.js\"></script>\n        <video id=\"videoElement\"></video>\n        <script>\n        if (flvjs.isSupported()) {\n            var videoElement = document.getElementById('videoElement');\n            var flvPlayer = flvjs.createPlayer({\n                type: 'flv',\n                url: 'http://example.com/flv/video.flv'\n            });\n            flvPlayer.attachMediaElement(videoElement);\n            flvPlayer.load();\n            flvPlayer.play();\n        }\n        </script>\n    ```\n                \n4. **基于 Media Source Extensions 播放视频流**：Media Source Extensions（媒体源扩展，缩写 MSE ）是一项 W3C 规范，MSE 允许 Javascript 为 audio 标签和video标签动态地构造媒体源。借助 MSE 的能力，我们可以将接收到的实时流通过 `blob url` 往 video 标签中灌入二进制数据（如 fmp4 格式流），或者使用 `canvas` 来实现直播。\n    - **简单实现**：首先，判断浏览器是否支持 MediaSource：\n    ```javascript\n        const supportMediaSource = window.MediaSource &&\n        typeof window.MediaSource.isTypeSupported === 'function' &&\n        window.MediaSource.isTypeSupported('video/mp4; codecs=\"avc1.42c01f,mp4a.40.2\"');\n    ```\nMediaSource支持情况：\n    |  | Chrome | Edge | Firefox | Safari | Opera | Android |\n    | --- | --- | --- | --- | --- | --- | --- |\n    | MediaSource | 31 | 12 | 42 | 8 | 18 | 4.4.3 |\n    | MediaSource() Constructor | 31 | 12 | 42 | 8 | 15 | 4.4.3 |\n    | activeSourceBuffers | 23 | 12 | 42 | 8 | 15 | 4.4.3 |\n    | addSourceBuffer | 23 | 12 | 42 | 8 | 15 | 4.4.3 |\n\n接下来新建 `MediaSource` 实例，并使用生成 blob url 加到 video 标签。并且监听 `sourceOpen` 事件来判断初始化完成。\n\n    ```javascript\n        const mediaSource = new MediaSource();\n        const video = document.querySelector('#video-box');\n        video.src = URL.createObjectURL(mediaSource);\n\n        mediaSource.addEventListener('sourceopen',function(){\n            // TODO\n        })\n    ```\n接下来我们通过 websocket 获取原始视频流，处理后通过 `SourceBuffer` 喂给 `mediaSource`\n\n    ```javascript\n        const sourceBuffer = mediaSource.addSourceBuffer('video/mp4; codecs=\"avc1.42E01E, mp4a.40.2\"');\n        const ws = new WebSocket(\"wss://xxx.websocket.com\");\n\n        ws.onopen = function(evt) { \n        console.log(\"Connection open...\"); \n        ws.send(\"fetch Data\");\n        };\n\n        ws.onmessage = function(evt) {\n        // 可以在灌入数据前进行转码等操作\n        sourceBuffer.appendBuffer(evt.data);\n        };\n\n        ws.onclose = function(evt) {\n        console.log(\"Connection closed.\");\n        };\n    ```\n通过MSE的方式我们可以将接收到的视频或者音频流进行端处理，配合WebWorker技术实现快速转码、支持多播，给我们无限的想象空间。\n\n5. **H.265 视频播放**：H.265 是 ITU-T VCEG 继 H.264 之后所制定的新的视频编码标准。H.265 标准围绕着现有的视频编码标准 H.264，保留原来的某些技术，同时对一些相关的技术加以改进。新技术使用先进的技术用以改善码流、编码质量、延时和算法复杂度之间的关系，达到最优化设置。但是由于浏览器不支持 H265 格式的流，所以我们无法直接播放。这时候可以使用 MSE 的方式在 `sourceBuffer.appendBuffer(evt.data)` 前将 `evt.data` 使用 libde265.js 等转码库转码后给到 `sourceBuffer`。或者使用业界成熟的播放器进行播放，如淘系的 @ali/videox 播放器。\n\n## 总结\n越来越多的厂商更加偏向于H.265的编码格式，但是浏览器对该格式的支持度不友好的前提下我们不得不进行转码。使用MSE方式在浏览器端转码，则能借助GPU提高效率和降低延迟。但还是无法兼容所有的PC或者移动端浏览器，这条路还需要我们去继续探索。5G给互联网带来的福利不仅仅是在视频、直播的爆发，我相信web端图像视频技术也将突破现有的技术瓶颈，WebAssembly、硬件编码等图像渲染技术也将越来越丰富。\n\n## 参考\n- baike.baidu.com/item/ffmpeg\n- github.com/Bilibili/fl…\n- developer.mozilla.org/zh-CN/docs/…\n\n**标签**：JavaScript\n","source":"_posts/web 视频播放一杆到底.md","raw":"---\ntitle: web视频播放一杆到底\ndate: 2020-12-09 12:24:22\ntags:\n---\n## 前言\n毫无疑问，现在是短视频、直播的时代。视频内容逐渐代替图文形式成为网友们获取新鲜事物以及展现自我的一大媒介。随着5G的到来，2020年属于直播短视频爆发式增长的一年，电商平台也都涌入直播营销的大风口，成为了各自平台引流转化的关键。不管是用户还是开发者，我们处于这个风口中。本文将带你探索浏览器视频播放的奥秘。\n\n## 视频的构成\n一个完整可播放的视频文件是由视频和音频两部分构成。视频和音频又有各自的封装格式（容器）和编码格式。\n1. **编码格式**：常见的视频编码格式有：MPEG4、H.264、H.265 等。常见的音频编码格式有：MP3、AAC、WAV 等。\n2. **封装格式**：常见的视频封装格式有：MP4、FLV、mov、AVI、RMVB 等。\n\n## 先理解几个名词\n1. **帧**：就是影像动画中的最小单位的影像画面。一帧就是一张静止的图像。视频中的动画就是由多幅连续的帧画面构成。\n2. **帧率**：帧率是以帧为单位的图像在显示器上出现的频率，也叫帧速率，单位：赫兹（Hz）。简单理解为每秒播放图片的数量。\n3. **码率**：码率是比特率的俗称，是指每秒传送的比特数。\n4. **FFmpeg**：FFmpeg 是可以用来记录、转换数字视频和音频的一套计算机程序。FFmpeg 是在 linux 下开发，所以天生跨平台。它对音视频编码格式的支持比较全面，能对视频的各个组成部分进行编码。\n5. **H264**：通常被称之为 H.264/AVC；是由国际标准化组织和国际电信联盟共同提出的继MPEG4之后的新一代数字视频压缩格式。采用 H.264 压缩后的数据具有低码率、高质量图像、容错能力强、网络适应性强等优点。\n6. **MP4**：MP4 是一种标准的数字多媒体容器格式；用于音频、视频的压缩编码，也可以存储字幕和静止图像，同时能以流的方式进行网络传输。\n7. **fMP4（Fragmented MP4）**：fMP4 是基于 MPEG-4 Part 12 的流媒体格式，与 MP4 很相似。简单来说 fMP4 区别于 MP4 最大的区别就是它能很好地适应流式播放。\n\n## 浏览器播放视频\n1. **video标签播放**：在浏览器播放视频，可以使用 HTML5 原生的 video 标签。但其播放的格式使用一定限制的，目前 video 只支持三种格式 WebM、Ogg、MP4。\n    - WebM：WebM 文件使用 VP8 视频编解码器和 Vorbis 音频编解码器\n    - Ogg：Ogg 文件使用 Theora 视频编解码器和 Vorbis 音频编解码器\n    - MP4：MPEG 4 文件使用 H264 视频编解码器和 AAC 音频编解码器\n    ```html\n        <video id=\"video-box\" src=\"//cloud.video.taobao.com/play/u/755731755/p/1/e/6/t/1/283631891407.mp4\" controls width=\"400px\" heigt=\"400px\"></video>\n    ```\n    在页面初始化完成后，video 标签会将整个 mp4 文件下载到浏览器，完成后即可播放。但是当 mp4 文件较大时，缓存时间就比较长，播放体验不好。当然也可以使用 **video.js** 来播放，这里就不赘述了。\n\n2. **播放HLS流**：HLS（HTTP Live Streaming）是一个由 Apple 公司提出的基于 HTTP 的流媒体传输协议。视频的封装格式是 TS，编码格式是 H.264/ACC，除了定义 TS 视频文件本身，还定义了用来控制播放的m3u8 文本文件。移动端大部分浏览器都支持，也就是说，你可以在移动端浏览器直接使用 vedio 标签直接加载一个 m3u8 文件播放视频或者直播。但在 PC 端只支持苹果的 safari 浏览器，其他浏览器想播放需要引入第三方库，如：hls.js：\n    ```html\n        <script src=\"https://cdn.jsdelivr.net/npm/hls.js\"></script>\n        <video id=\"video\"></video>\n        <script>\n        var video = document.getElementById('video');\n        var videoSrc = 'https://test-streams.mux.dev/x36xhzz/x36xhzz.m3u8';\n        if (Hls.isSupported()) {\n            var hls = new Hls();\n            hls.loadSource(videoSrc);\n            hls.attachMedia(video);\n            hls.on(Hls.Events.MANIFEST_PARSED, function() {\n                video.play();\n                });\n        }\n        </script>\n    ```\n播放 HLS 流的逻辑很简单，首先根据提供的 m3u8 地址源通过 HTTP 请求获取到一级 index 文件内容，例如：\n    ```nginx\n        #EXTM3U\n        #EXT-X-STREAM-INF:PROGRAM-ID=1,BANDWIDTH=64000\n        500kbps.m3u8\n        #EXT-X-STREAM-INF:PROGRAM-ID=1,BANDWIDTH=774000\n        1000kbps.m3u8\n        #EXT-X-STREAM-INF:PROGRAM-ID=1,BANDWIDTH=887000\n        500kbps.m3u8\n        #EXT-X-STREAM-INF:PROGRAM-ID=1,BANDWIDTH=7692000\n        1000kbps.m3u8\n    ```\n`bandwidth` 指定视频流的码率，每一个 `#EXT-X-STEAM-INF` 的下一行是二级 index 文件的路径，可以是相对路径或者是绝对路径。请求到的二级文件内容如下：\n\n    ```nginx    \n        #EXTM3U\n        #EXT-X-PLAYLIST-TYPE:VOD\n        #EXT-X-TARGETDURATION:10\n        #EXTINF:10,\n        1000kbps-00001.ts\n        #EXTINF:10,\n        1000kbps-00002.ts\n        #EXTINF:10,\n        1000kbps-00003.ts\n        #EXTINF:10,\n        1000kbps-00004.ts\n        #EXTINF:10,\n        ... ...\n        #EXT-X-ENDLIST\n     ```\n可以从二级文件中读取到 ts 文件的路径，同样可以是相对路径或者绝对路径。`#EXTINF` 表示每个 ts 切片的时长。`#EXT-X-ENDLIST` 是视频结束标志，如果有这个标志也表明该流不是一个直播流。\n\n    - **HLS播放的优势**：可以使用 http 协议请求数据流；可以切换不同的码率，实现无缝播放\n    - **劣势**：延迟较高，实时性差，一般延迟在 10s 以上，不适合做直播；ts 文件切片小且多，对存储和缓存都有一定的要求\n\n3. **播放FLV流**：FLV（Flash Video）是一种网络视频格式，FLV只能基于 flash 播放，但是由于 flash 存在很多安全问题已经被众多厂商抛弃，现在我们如果要在 H5 中播放 flv 格式的视频流可以使用 Blibli 的开源库：Flv.js，`flv.js`原理是解析视频的flv流并实时转换为 fmp4 格式，再通过 Media Source Extension 喂给浏览器的 `video` 标签。\n    ```html\n        <script src=\"flv.min.js\"></script>\n        <video id=\"videoElement\"></video>\n        <script>\n        if (flvjs.isSupported()) {\n            var videoElement = document.getElementById('videoElement');\n            var flvPlayer = flvjs.createPlayer({\n                type: 'flv',\n                url: 'http://example.com/flv/video.flv'\n            });\n            flvPlayer.attachMediaElement(videoElement);\n            flvPlayer.load();\n            flvPlayer.play();\n        }\n        </script>\n    ```\n                \n4. **基于 Media Source Extensions 播放视频流**：Media Source Extensions（媒体源扩展，缩写 MSE ）是一项 W3C 规范，MSE 允许 Javascript 为 audio 标签和video标签动态地构造媒体源。借助 MSE 的能力，我们可以将接收到的实时流通过 `blob url` 往 video 标签中灌入二进制数据（如 fmp4 格式流），或者使用 `canvas` 来实现直播。\n    - **简单实现**：首先，判断浏览器是否支持 MediaSource：\n    ```javascript\n        const supportMediaSource = window.MediaSource &&\n        typeof window.MediaSource.isTypeSupported === 'function' &&\n        window.MediaSource.isTypeSupported('video/mp4; codecs=\"avc1.42c01f,mp4a.40.2\"');\n    ```\nMediaSource支持情况：\n    |  | Chrome | Edge | Firefox | Safari | Opera | Android |\n    | --- | --- | --- | --- | --- | --- | --- |\n    | MediaSource | 31 | 12 | 42 | 8 | 18 | 4.4.3 |\n    | MediaSource() Constructor | 31 | 12 | 42 | 8 | 15 | 4.4.3 |\n    | activeSourceBuffers | 23 | 12 | 42 | 8 | 15 | 4.4.3 |\n    | addSourceBuffer | 23 | 12 | 42 | 8 | 15 | 4.4.3 |\n\n接下来新建 `MediaSource` 实例，并使用生成 blob url 加到 video 标签。并且监听 `sourceOpen` 事件来判断初始化完成。\n\n    ```javascript\n        const mediaSource = new MediaSource();\n        const video = document.querySelector('#video-box');\n        video.src = URL.createObjectURL(mediaSource);\n\n        mediaSource.addEventListener('sourceopen',function(){\n            // TODO\n        })\n    ```\n接下来我们通过 websocket 获取原始视频流，处理后通过 `SourceBuffer` 喂给 `mediaSource`\n\n    ```javascript\n        const sourceBuffer = mediaSource.addSourceBuffer('video/mp4; codecs=\"avc1.42E01E, mp4a.40.2\"');\n        const ws = new WebSocket(\"wss://xxx.websocket.com\");\n\n        ws.onopen = function(evt) { \n        console.log(\"Connection open...\"); \n        ws.send(\"fetch Data\");\n        };\n\n        ws.onmessage = function(evt) {\n        // 可以在灌入数据前进行转码等操作\n        sourceBuffer.appendBuffer(evt.data);\n        };\n\n        ws.onclose = function(evt) {\n        console.log(\"Connection closed.\");\n        };\n    ```\n通过MSE的方式我们可以将接收到的视频或者音频流进行端处理，配合WebWorker技术实现快速转码、支持多播，给我们无限的想象空间。\n\n5. **H.265 视频播放**：H.265 是 ITU-T VCEG 继 H.264 之后所制定的新的视频编码标准。H.265 标准围绕着现有的视频编码标准 H.264，保留原来的某些技术，同时对一些相关的技术加以改进。新技术使用先进的技术用以改善码流、编码质量、延时和算法复杂度之间的关系，达到最优化设置。但是由于浏览器不支持 H265 格式的流，所以我们无法直接播放。这时候可以使用 MSE 的方式在 `sourceBuffer.appendBuffer(evt.data)` 前将 `evt.data` 使用 libde265.js 等转码库转码后给到 `sourceBuffer`。或者使用业界成熟的播放器进行播放，如淘系的 @ali/videox 播放器。\n\n## 总结\n越来越多的厂商更加偏向于H.265的编码格式，但是浏览器对该格式的支持度不友好的前提下我们不得不进行转码。使用MSE方式在浏览器端转码，则能借助GPU提高效率和降低延迟。但还是无法兼容所有的PC或者移动端浏览器，这条路还需要我们去继续探索。5G给互联网带来的福利不仅仅是在视频、直播的爆发，我相信web端图像视频技术也将突破现有的技术瓶颈，WebAssembly、硬件编码等图像渲染技术也将越来越丰富。\n\n## 参考\n- baike.baidu.com/item/ffmpeg\n- github.com/Bilibili/fl…\n- developer.mozilla.org/zh-CN/docs/…\n\n**标签**：JavaScript\n","slug":"web 视频播放一杆到底","published":1,"updated":"2025-02-09T05:19:18.311Z","_id":"cm6x4fwfy00006csy9w6l0xgr","comments":1,"layout":"post","photos":[],"content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>毫无疑问，现在是短视频、直播的时代。视频内容逐渐代替图文形式成为网友们获取新鲜事物以及展现自我的一大媒介。随着5G的到来，2020年属于直播短视频爆发式增长的一年，电商平台也都涌入直播营销的大风口，成为了各自平台引流转化的关键。不管是用户还是开发者，我们处于这个风口中。本文将带你探索浏览器视频播放的奥秘。</p>\n<h2 id=\"视频的构成\"><a href=\"#视频的构成\" class=\"headerlink\" title=\"视频的构成\"></a>视频的构成</h2><p>一个完整可播放的视频文件是由视频和音频两部分构成。视频和音频又有各自的封装格式（容器）和编码格式。</p>\n<ol>\n<li><strong>编码格式</strong>：常见的视频编码格式有：MPEG4、H.264、H.265 等。常见的音频编码格式有：MP3、AAC、WAV 等。</li>\n<li><strong>封装格式</strong>：常见的视频封装格式有：MP4、FLV、mov、AVI、RMVB 等。</li>\n</ol>\n<h2 id=\"先理解几个名词\"><a href=\"#先理解几个名词\" class=\"headerlink\" title=\"先理解几个名词\"></a>先理解几个名词</h2><ol>\n<li><strong>帧</strong>：就是影像动画中的最小单位的影像画面。一帧就是一张静止的图像。视频中的动画就是由多幅连续的帧画面构成。</li>\n<li><strong>帧率</strong>：帧率是以帧为单位的图像在显示器上出现的频率，也叫帧速率，单位：赫兹（Hz）。简单理解为每秒播放图片的数量。</li>\n<li><strong>码率</strong>：码率是比特率的俗称，是指每秒传送的比特数。</li>\n<li><strong>FFmpeg</strong>：FFmpeg 是可以用来记录、转换数字视频和音频的一套计算机程序。FFmpeg 是在 linux 下开发，所以天生跨平台。它对音视频编码格式的支持比较全面，能对视频的各个组成部分进行编码。</li>\n<li><strong>H264</strong>：通常被称之为 H.264&#x2F;AVC；是由国际标准化组织和国际电信联盟共同提出的继MPEG4之后的新一代数字视频压缩格式。采用 H.264 压缩后的数据具有低码率、高质量图像、容错能力强、网络适应性强等优点。</li>\n<li><strong>MP4</strong>：MP4 是一种标准的数字多媒体容器格式；用于音频、视频的压缩编码，也可以存储字幕和静止图像，同时能以流的方式进行网络传输。</li>\n<li><strong>fMP4（Fragmented MP4）</strong>：fMP4 是基于 MPEG-4 Part 12 的流媒体格式，与 MP4 很相似。简单来说 fMP4 区别于 MP4 最大的区别就是它能很好地适应流式播放。</li>\n</ol>\n<h2 id=\"浏览器播放视频\"><a href=\"#浏览器播放视频\" class=\"headerlink\" title=\"浏览器播放视频\"></a>浏览器播放视频</h2><ol>\n<li><p><strong>video标签播放</strong>：在浏览器播放视频，可以使用 HTML5 原生的 video 标签。但其播放的格式使用一定限制的，目前 video 只支持三种格式 WebM、Ogg、MP4。</p>\n<ul>\n<li>WebM：WebM 文件使用 VP8 视频编解码器和 Vorbis 音频编解码器</li>\n<li>Ogg：Ogg 文件使用 Theora 视频编解码器和 Vorbis 音频编解码器</li>\n<li>MP4：MPEG 4 文件使用 H264 视频编解码器和 AAC 音频编解码器 <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">video</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;video-box&quot;</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;//cloud.video.taobao.com/play/u/755731755/p/1/e/6/t/1/283631891407.mp4&quot;</span> <span class=\"attr\">controls</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;400px&quot;</span> <span class=\"attr\">heigt</span>=<span class=\"string\">&quot;400px&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">video</span>&gt;</span></span><br></pre></td></tr></table></figure>\n 在页面初始化完成后，video 标签会将整个 mp4 文件下载到浏览器，完成后即可播放。但是当 mp4 文件较大时，缓存时间就比较长，播放体验不好。当然也可以使用 <strong>video.js</strong> 来播放，这里就不赘述了。</li>\n</ul>\n</li>\n<li><p><strong>播放HLS流</strong>：HLS（HTTP Live Streaming）是一个由 Apple 公司提出的基于 HTTP 的流媒体传输协议。视频的封装格式是 TS，编码格式是 H.264&#x2F;ACC，除了定义 TS 视频文件本身，还定义了用来控制播放的m3u8 文本文件。移动端大部分浏览器都支持，也就是说，你可以在移动端浏览器直接使用 vedio 标签直接加载一个 m3u8 文件播放视频或者直播。但在 PC 端只支持苹果的 safari 浏览器，其他浏览器想播放需要引入第三方库，如：hls.js：</p>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.jsdelivr.net/npm/hls.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">video</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;video&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">video</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">var</span> video = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;video&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">var</span> videoSrc = <span class=\"string\">&#x27;https://test-streams.mux.dev/x36xhzz/x36xhzz.m3u8&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">if</span> (<span class=\"title class_\">Hls</span>.<span class=\"title function_\">isSupported</span>()) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">var</span> hls = <span class=\"keyword\">new</span> <span class=\"title class_\">Hls</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\">    hls.<span class=\"title function_\">loadSource</span>(videoSrc);</span></span><br><span class=\"line\"><span class=\"language-javascript\">    hls.<span class=\"title function_\">attachMedia</span>(video);</span></span><br><span class=\"line\"><span class=\"language-javascript\">    hls.<span class=\"title function_\">on</span>(<span class=\"title class_\">Hls</span>.<span class=\"property\">Events</span>.<span class=\"property\">MANIFEST_PARSED</span>, <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        video.<span class=\"title function_\">play</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\">&#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>播放 HLS 流的逻辑很简单，首先根据提供的 m3u8 地址源通过 HTTP 请求获取到一级 index 文件内容，例如：</p>\n <figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#EXTM3U</span></span><br><span class=\"line\"><span class=\"comment\">#EXT-X-STREAM-INF:PROGRAM-ID=1,BANDWIDTH=64000</span></span><br><span class=\"line\">500kbps.<span class=\"attribute\">m3u8</span></span><br><span class=\"line\"><span class=\"comment\">#EXT-X-STREAM-INF:PROGRAM-ID=1,BANDWIDTH=774000</span></span><br><span class=\"line\">1000kbps.m3u8</span><br><span class=\"line\"><span class=\"comment\">#EXT-X-STREAM-INF:PROGRAM-ID=1,BANDWIDTH=887000</span></span><br><span class=\"line\">500kbps.m3u8</span><br><span class=\"line\"><span class=\"comment\">#EXT-X-STREAM-INF:PROGRAM-ID=1,BANDWIDTH=7692000</span></span><br><span class=\"line\">1000kbps.m3u8</span><br></pre></td></tr></table></figure>\n<p><code>bandwidth</code> 指定视频流的码率，每一个 <code>#EXT-X-STEAM-INF</code> 的下一行是二级 index 文件的路径，可以是相对路径或者是绝对路径。请求到的二级文件内容如下：</p>\n <figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#EXTM3U</span></span><br><span class=\"line\"><span class=\"comment\">#EXT-X-PLAYLIST-TYPE:VOD</span></span><br><span class=\"line\"><span class=\"comment\">#EXT-X-TARGETDURATION:10</span></span><br><span class=\"line\"><span class=\"comment\">#EXTINF:10,</span></span><br><span class=\"line\">1000kbps-00001.<span class=\"attribute\">ts</span></span><br><span class=\"line\"><span class=\"comment\">#EXTINF:10,</span></span><br><span class=\"line\">1000kbps-<span class=\"number\">00002</span>.ts</span><br><span class=\"line\"><span class=\"comment\">#EXTINF:10,</span></span><br><span class=\"line\">1000kbps-<span class=\"number\">00003</span>.ts</span><br><span class=\"line\"><span class=\"comment\">#EXTINF:10,</span></span><br><span class=\"line\">1000kbps-<span class=\"number\">00004</span>.ts</span><br><span class=\"line\"><span class=\"comment\">#EXTINF:10,</span></span><br><span class=\"line\">... ...</span><br><span class=\"line\"><span class=\"comment\">#EXT-X-ENDLIST</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>可以从二级文件中读取到 ts 文件的路径，同样可以是相对路径或者绝对路径。<code>#EXTINF</code> 表示每个 ts 切片的时长。<code>#EXT-X-ENDLIST</code> 是视频结束标志，如果有这个标志也表明该流不是一个直播流。</p>\n<pre><code>- **HLS播放的优势**：可以使用 http 协议请求数据流；可以切换不同的码率，实现无缝播放\n- **劣势**：延迟较高，实时性差，一般延迟在 10s 以上，不适合做直播；ts 文件切片小且多，对存储和缓存都有一定的要求\n</code></pre>\n<ol start=\"3\">\n<li><p><strong>播放FLV流</strong>：FLV（Flash Video）是一种网络视频格式，FLV只能基于 flash 播放，但是由于 flash 存在很多安全问题已经被众多厂商抛弃，现在我们如果要在 H5 中播放 flv 格式的视频流可以使用 Blibli 的开源库：Flv.js，<code>flv.js</code>原理是解析视频的flv流并实时转换为 fmp4 格式，再通过 Media Source Extension 喂给浏览器的 <code>video</code> 标签。</p>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;flv.min.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">video</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;videoElement&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">video</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">if</span> (flvjs.<span class=\"title function_\">isSupported</span>()) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">var</span> videoElement = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;videoElement&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">var</span> flvPlayer = flvjs.<span class=\"title function_\">createPlayer</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">type</span>: <span class=\"string\">&#x27;flv&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">url</span>: <span class=\"string\">&#x27;http://example.com/flv/video.flv&#x27;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\">    flvPlayer.<span class=\"title function_\">attachMediaElement</span>(videoElement);</span></span><br><span class=\"line\"><span class=\"language-javascript\">    flvPlayer.<span class=\"title function_\">load</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\">    flvPlayer.<span class=\"title function_\">play</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\">&#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>基于 Media Source Extensions 播放视频流</strong>：Media Source Extensions（媒体源扩展，缩写 MSE ）是一项 W3C 规范，MSE 允许 Javascript 为 audio 标签和video标签动态地构造媒体源。借助 MSE 的能力，我们可以将接收到的实时流通过 <code>blob url</code> 往 video 标签中灌入二进制数据（如 fmp4 格式流），或者使用 <code>canvas</code> 来实现直播。</p>\n<ul>\n<li><strong>简单实现</strong>：首先，判断浏览器是否支持 MediaSource： <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> supportMediaSource = <span class=\"variable language_\">window</span>.<span class=\"property\">MediaSource</span> &amp;&amp;</span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"variable language_\">window</span>.<span class=\"property\">MediaSource</span>.<span class=\"property\">isTypeSupported</span> === <span class=\"string\">&#x27;function&#x27;</span> &amp;&amp;</span><br><span class=\"line\"><span class=\"variable language_\">window</span>.<span class=\"property\">MediaSource</span>.<span class=\"title function_\">isTypeSupported</span>(<span class=\"string\">&#x27;video/mp4; codecs=&quot;avc1.42c01f,mp4a.40.2&quot;&#x27;</span>);</span><br></pre></td></tr></table></figure>\nMediaSource支持情况：<table>\n<thead>\n<tr>\n<th></th>\n<th>Chrome</th>\n<th>Edge</th>\n<th>Firefox</th>\n<th>Safari</th>\n<th>Opera</th>\n<th>Android</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>MediaSource</td>\n<td>31</td>\n<td>12</td>\n<td>42</td>\n<td>8</td>\n<td>18</td>\n<td>4.4.3</td>\n</tr>\n<tr>\n<td>MediaSource() Constructor</td>\n<td>31</td>\n<td>12</td>\n<td>42</td>\n<td>8</td>\n<td>15</td>\n<td>4.4.3</td>\n</tr>\n<tr>\n<td>activeSourceBuffers</td>\n<td>23</td>\n<td>12</td>\n<td>42</td>\n<td>8</td>\n<td>15</td>\n<td>4.4.3</td>\n</tr>\n<tr>\n<td>addSourceBuffer</td>\n<td>23</td>\n<td>12</td>\n<td>42</td>\n<td>8</td>\n<td>15</td>\n<td>4.4.3</td>\n</tr>\n</tbody></table>\n</li>\n</ul>\n</li>\n</ol>\n<p>接下来新建 <code>MediaSource</code> 实例，并使用生成 blob url 加到 video 标签。并且监听 <code>sourceOpen</code> 事件来判断初始化完成。</p>\n<pre><code><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> mediaSource = <span class=\"keyword\">new</span> <span class=\"title class_\">MediaSource</span>();</span><br><span class=\"line\"><span class=\"keyword\">const</span> video = <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&#x27;#video-box&#x27;</span>);</span><br><span class=\"line\">video.<span class=\"property\">src</span> = <span class=\"variable constant_\">URL</span>.<span class=\"title function_\">createObjectURL</span>(mediaSource);</span><br><span class=\"line\"></span><br><span class=\"line\">mediaSource.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;sourceopen&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"comment\">// TODO</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</code></pre>\n<p>接下来我们通过 websocket 获取原始视频流，处理后通过 <code>SourceBuffer</code> 喂给 <code>mediaSource</code></p>\n<pre><code><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> sourceBuffer = mediaSource.<span class=\"title function_\">addSourceBuffer</span>(<span class=\"string\">&#x27;video/mp4; codecs=&quot;avc1.42E01E, mp4a.40.2&quot;&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> ws = <span class=\"keyword\">new</span> <span class=\"title class_\">WebSocket</span>(<span class=\"string\">&quot;wss://xxx.websocket.com&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">ws.<span class=\"property\">onopen</span> = <span class=\"keyword\">function</span>(<span class=\"params\">evt</span>) &#123; </span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Connection open...&quot;</span>); </span><br><span class=\"line\">ws.<span class=\"title function_\">send</span>(<span class=\"string\">&quot;fetch Data&quot;</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">ws.<span class=\"property\">onmessage</span> = <span class=\"keyword\">function</span>(<span class=\"params\">evt</span>) &#123;</span><br><span class=\"line\"><span class=\"comment\">// 可以在灌入数据前进行转码等操作</span></span><br><span class=\"line\">sourceBuffer.<span class=\"title function_\">appendBuffer</span>(evt.<span class=\"property\">data</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">ws.<span class=\"property\">onclose</span> = <span class=\"keyword\">function</span>(<span class=\"params\">evt</span>) &#123;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Connection closed.&quot;</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</code></pre>\n<p>通过MSE的方式我们可以将接收到的视频或者音频流进行端处理，配合WebWorker技术实现快速转码、支持多播，给我们无限的想象空间。</p>\n<ol start=\"5\">\n<li><strong>H.265 视频播放</strong>：H.265 是 ITU-T VCEG 继 H.264 之后所制定的新的视频编码标准。H.265 标准围绕着现有的视频编码标准 H.264，保留原来的某些技术，同时对一些相关的技术加以改进。新技术使用先进的技术用以改善码流、编码质量、延时和算法复杂度之间的关系，达到最优化设置。但是由于浏览器不支持 H265 格式的流，所以我们无法直接播放。这时候可以使用 MSE 的方式在 <code>sourceBuffer.appendBuffer(evt.data)</code> 前将 <code>evt.data</code> 使用 libde265.js 等转码库转码后给到 <code>sourceBuffer</code>。或者使用业界成熟的播放器进行播放，如淘系的 @ali&#x2F;videox 播放器。</li>\n</ol>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>越来越多的厂商更加偏向于H.265的编码格式，但是浏览器对该格式的支持度不友好的前提下我们不得不进行转码。使用MSE方式在浏览器端转码，则能借助GPU提高效率和降低延迟。但还是无法兼容所有的PC或者移动端浏览器，这条路还需要我们去继续探索。5G给互联网带来的福利不仅仅是在视频、直播的爆发，我相信web端图像视频技术也将突破现有的技术瓶颈，WebAssembly、硬件编码等图像渲染技术也将越来越丰富。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li>baike.baidu.com&#x2F;item&#x2F;ffmpeg</li>\n<li>github.com&#x2F;Bilibili&#x2F;fl…</li>\n<li>developer.mozilla.org&#x2F;zh-CN&#x2F;docs&#x2F;…</li>\n</ul>\n<p><strong>标签</strong>：JavaScript</p>\n","excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>毫无疑问，现在是短视频、直播的时代。视频内容逐渐代替图文形式成为网友们获取新鲜事物以及展现自我的一大媒介。随着5G的到来，2020年属于直播短视频爆发式增长的一年，电商平台也都涌入直播营销的大风口，成为了各自平台引流转化的关键。不管是用户还是开发者，我们处于这个风口中。本文将带你探索浏览器视频播放的奥秘。</p>\n<h2 id=\"视频的构成\"><a href=\"#视频的构成\" class=\"headerlink\" title=\"视频的构成\"></a>视频的构成</h2><p>一个完整可播放的视频文件是由视频和音频两部分构成。视频和音频又有各自的封装格式（容器）和编码格式。</p>\n<ol>\n<li><strong>编码格式</strong>：常见的视频编码格式有：MPEG4、H.264、H.265 等。常见的音频编码格式有：MP3、AAC、WAV 等。</li>\n<li><strong>封装格式</strong>：常见的视频封装格式有：MP4、FLV、mov、AVI、RMVB 等。</li>\n</ol>\n<h2 id=\"先理解几个名词\"><a href=\"#先理解几个名词\" class=\"headerlink\" title=\"先理解几个名词\"></a>先理解几个名词</h2><ol>\n<li><strong>帧</strong>：就是影像动画中的最小单位的影像画面。一帧就是一张静止的图像。视频中的动画就是由多幅连续的帧画面构成。</li>\n<li><strong>帧率</strong>：帧率是以帧为单位的图像在显示器上出现的频率，也叫帧速率，单位：赫兹（Hz）。简单理解为每秒播放图片的数量。</li>\n<li><strong>码率</strong>：码率是比特率的俗称，是指每秒传送的比特数。</li>\n<li><strong>FFmpeg</strong>：FFmpeg 是可以用来记录、转换数字视频和音频的一套计算机程序。FFmpeg 是在 linux 下开发，所以天生跨平台。它对音视频编码格式的支持比较全面，能对视频的各个组成部分进行编码。</li>\n<li><strong>H264</strong>：通常被称之为 H.264&#x2F;AVC；是由国际标准化组织和国际电信联盟共同提出的继MPEG4之后的新一代数字视频压缩格式。采用 H.264 压缩后的数据具有低码率、高质量图像、容错能力强、网络适应性强等优点。</li>\n<li><strong>MP4</strong>：MP4 是一种标准的数字多媒体容器格式；用于音频、视频的压缩编码，也可以存储字幕和静止图像，同时能以流的方式进行网络传输。</li>\n<li><strong>fMP4（Fragmented MP4）</strong>：fMP4 是基于 MPEG-4 Part 12 的流媒体格式，与 MP4 很相似。简单来说 fMP4 区别于 MP4 最大的区别就是它能很好地适应流式播放。</li>\n</ol>\n<h2 id=\"浏览器播放视频\"><a href=\"#浏览器播放视频\" class=\"headerlink\" title=\"浏览器播放视频\"></a>浏览器播放视频</h2><ol>\n<li><p><strong>video标签播放</strong>：在浏览器播放视频，可以使用 HTML5 原生的 video 标签。但其播放的格式使用一定限制的，目前 video 只支持三种格式 WebM、Ogg、MP4。</p>\n<ul>\n<li>WebM：WebM 文件使用 VP8 视频编解码器和 Vorbis 音频编解码器</li>\n<li>Ogg：Ogg 文件使用 Theora 视频编解码器和 Vorbis 音频编解码器</li>\n<li>MP4：MPEG 4 文件使用 H264 视频编解码器和 AAC 音频编解码器 <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">video</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;video-box&quot;</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;//cloud.video.taobao.com/play/u/755731755/p/1/e/6/t/1/283631891407.mp4&quot;</span> <span class=\"attr\">controls</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;400px&quot;</span> <span class=\"attr\">heigt</span>=<span class=\"string\">&quot;400px&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">video</span>&gt;</span></span><br></pre></td></tr></table></figure>\n 在页面初始化完成后，video 标签会将整个 mp4 文件下载到浏览器，完成后即可播放。但是当 mp4 文件较大时，缓存时间就比较长，播放体验不好。当然也可以使用 <strong>video.js</strong> 来播放，这里就不赘述了。</li>\n</ul>\n</li>\n<li><p><strong>播放HLS流</strong>：HLS（HTTP Live Streaming）是一个由 Apple 公司提出的基于 HTTP 的流媒体传输协议。视频的封装格式是 TS，编码格式是 H.264&#x2F;ACC，除了定义 TS 视频文件本身，还定义了用来控制播放的m3u8 文本文件。移动端大部分浏览器都支持，也就是说，你可以在移动端浏览器直接使用 vedio 标签直接加载一个 m3u8 文件播放视频或者直播。但在 PC 端只支持苹果的 safari 浏览器，其他浏览器想播放需要引入第三方库，如：hls.js：</p>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.jsdelivr.net/npm/hls.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">video</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;video&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">video</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">var</span> video = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;video&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">var</span> videoSrc = <span class=\"string\">&#x27;https://test-streams.mux.dev/x36xhzz/x36xhzz.m3u8&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">if</span> (<span class=\"title class_\">Hls</span>.<span class=\"title function_\">isSupported</span>()) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">var</span> hls = <span class=\"keyword\">new</span> <span class=\"title class_\">Hls</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\">    hls.<span class=\"title function_\">loadSource</span>(videoSrc);</span></span><br><span class=\"line\"><span class=\"language-javascript\">    hls.<span class=\"title function_\">attachMedia</span>(video);</span></span><br><span class=\"line\"><span class=\"language-javascript\">    hls.<span class=\"title function_\">on</span>(<span class=\"title class_\">Hls</span>.<span class=\"property\">Events</span>.<span class=\"property\">MANIFEST_PARSED</span>, <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        video.<span class=\"title function_\">play</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\">&#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>播放 HLS 流的逻辑很简单，首先根据提供的 m3u8 地址源通过 HTTP 请求获取到一级 index 文件内容，例如：</p>\n <figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#EXTM3U</span></span><br><span class=\"line\"><span class=\"comment\">#EXT-X-STREAM-INF:PROGRAM-ID=1,BANDWIDTH=64000</span></span><br><span class=\"line\">500kbps.<span class=\"attribute\">m3u8</span></span><br><span class=\"line\"><span class=\"comment\">#EXT-X-STREAM-INF:PROGRAM-ID=1,BANDWIDTH=774000</span></span><br><span class=\"line\">1000kbps.m3u8</span><br><span class=\"line\"><span class=\"comment\">#EXT-X-STREAM-INF:PROGRAM-ID=1,BANDWIDTH=887000</span></span><br><span class=\"line\">500kbps.m3u8</span><br><span class=\"line\"><span class=\"comment\">#EXT-X-STREAM-INF:PROGRAM-ID=1,BANDWIDTH=7692000</span></span><br><span class=\"line\">1000kbps.m3u8</span><br></pre></td></tr></table></figure>\n<p><code>bandwidth</code> 指定视频流的码率，每一个 <code>#EXT-X-STEAM-INF</code> 的下一行是二级 index 文件的路径，可以是相对路径或者是绝对路径。请求到的二级文件内容如下：</p>\n <figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#EXTM3U</span></span><br><span class=\"line\"><span class=\"comment\">#EXT-X-PLAYLIST-TYPE:VOD</span></span><br><span class=\"line\"><span class=\"comment\">#EXT-X-TARGETDURATION:10</span></span><br><span class=\"line\"><span class=\"comment\">#EXTINF:10,</span></span><br><span class=\"line\">1000kbps-00001.<span class=\"attribute\">ts</span></span><br><span class=\"line\"><span class=\"comment\">#EXTINF:10,</span></span><br><span class=\"line\">1000kbps-<span class=\"number\">00002</span>.ts</span><br><span class=\"line\"><span class=\"comment\">#EXTINF:10,</span></span><br><span class=\"line\">1000kbps-<span class=\"number\">00003</span>.ts</span><br><span class=\"line\"><span class=\"comment\">#EXTINF:10,</span></span><br><span class=\"line\">1000kbps-<span class=\"number\">00004</span>.ts</span><br><span class=\"line\"><span class=\"comment\">#EXTINF:10,</span></span><br><span class=\"line\">... ...</span><br><span class=\"line\"><span class=\"comment\">#EXT-X-ENDLIST</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>可以从二级文件中读取到 ts 文件的路径，同样可以是相对路径或者绝对路径。<code>#EXTINF</code> 表示每个 ts 切片的时长。<code>#EXT-X-ENDLIST</code> 是视频结束标志，如果有这个标志也表明该流不是一个直播流。</p>\n<pre><code>- **HLS播放的优势**：可以使用 http 协议请求数据流；可以切换不同的码率，实现无缝播放\n- **劣势**：延迟较高，实时性差，一般延迟在 10s 以上，不适合做直播；ts 文件切片小且多，对存储和缓存都有一定的要求\n</code></pre>\n<ol start=\"3\">\n<li><p><strong>播放FLV流</strong>：FLV（Flash Video）是一种网络视频格式，FLV只能基于 flash 播放，但是由于 flash 存在很多安全问题已经被众多厂商抛弃，现在我们如果要在 H5 中播放 flv 格式的视频流可以使用 Blibli 的开源库：Flv.js，<code>flv.js</code>原理是解析视频的flv流并实时转换为 fmp4 格式，再通过 Media Source Extension 喂给浏览器的 <code>video</code> 标签。</p>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;flv.min.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">video</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;videoElement&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">video</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">if</span> (flvjs.<span class=\"title function_\">isSupported</span>()) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">var</span> videoElement = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;videoElement&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">var</span> flvPlayer = flvjs.<span class=\"title function_\">createPlayer</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">type</span>: <span class=\"string\">&#x27;flv&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">url</span>: <span class=\"string\">&#x27;http://example.com/flv/video.flv&#x27;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\">    flvPlayer.<span class=\"title function_\">attachMediaElement</span>(videoElement);</span></span><br><span class=\"line\"><span class=\"language-javascript\">    flvPlayer.<span class=\"title function_\">load</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\">    flvPlayer.<span class=\"title function_\">play</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\">&#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>基于 Media Source Extensions 播放视频流</strong>：Media Source Extensions（媒体源扩展，缩写 MSE ）是一项 W3C 规范，MSE 允许 Javascript 为 audio 标签和video标签动态地构造媒体源。借助 MSE 的能力，我们可以将接收到的实时流通过 <code>blob url</code> 往 video 标签中灌入二进制数据（如 fmp4 格式流），或者使用 <code>canvas</code> 来实现直播。</p>\n<ul>\n<li><strong>简单实现</strong>：首先，判断浏览器是否支持 MediaSource： <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> supportMediaSource = <span class=\"variable language_\">window</span>.<span class=\"property\">MediaSource</span> &amp;&amp;</span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"variable language_\">window</span>.<span class=\"property\">MediaSource</span>.<span class=\"property\">isTypeSupported</span> === <span class=\"string\">&#x27;function&#x27;</span> &amp;&amp;</span><br><span class=\"line\"><span class=\"variable language_\">window</span>.<span class=\"property\">MediaSource</span>.<span class=\"title function_\">isTypeSupported</span>(<span class=\"string\">&#x27;video/mp4; codecs=&quot;avc1.42c01f,mp4a.40.2&quot;&#x27;</span>);</span><br></pre></td></tr></table></figure>\nMediaSource支持情况：<table>\n<thead>\n<tr>\n<th></th>\n<th>Chrome</th>\n<th>Edge</th>\n<th>Firefox</th>\n<th>Safari</th>\n<th>Opera</th>\n<th>Android</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>MediaSource</td>\n<td>31</td>\n<td>12</td>\n<td>42</td>\n<td>8</td>\n<td>18</td>\n<td>4.4.3</td>\n</tr>\n<tr>\n<td>MediaSource() Constructor</td>\n<td>31</td>\n<td>12</td>\n<td>42</td>\n<td>8</td>\n<td>15</td>\n<td>4.4.3</td>\n</tr>\n<tr>\n<td>activeSourceBuffers</td>\n<td>23</td>\n<td>12</td>\n<td>42</td>\n<td>8</td>\n<td>15</td>\n<td>4.4.3</td>\n</tr>\n<tr>\n<td>addSourceBuffer</td>\n<td>23</td>\n<td>12</td>\n<td>42</td>\n<td>8</td>\n<td>15</td>\n<td>4.4.3</td>\n</tr>\n</tbody></table>\n</li>\n</ul>\n</li>\n</ol>\n<p>接下来新建 <code>MediaSource</code> 实例，并使用生成 blob url 加到 video 标签。并且监听 <code>sourceOpen</code> 事件来判断初始化完成。</p>\n<pre><code><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> mediaSource = <span class=\"keyword\">new</span> <span class=\"title class_\">MediaSource</span>();</span><br><span class=\"line\"><span class=\"keyword\">const</span> video = <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&#x27;#video-box&#x27;</span>);</span><br><span class=\"line\">video.<span class=\"property\">src</span> = <span class=\"variable constant_\">URL</span>.<span class=\"title function_\">createObjectURL</span>(mediaSource);</span><br><span class=\"line\"></span><br><span class=\"line\">mediaSource.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;sourceopen&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"comment\">// TODO</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</code></pre>\n<p>接下来我们通过 websocket 获取原始视频流，处理后通过 <code>SourceBuffer</code> 喂给 <code>mediaSource</code></p>\n<pre><code><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> sourceBuffer = mediaSource.<span class=\"title function_\">addSourceBuffer</span>(<span class=\"string\">&#x27;video/mp4; codecs=&quot;avc1.42E01E, mp4a.40.2&quot;&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> ws = <span class=\"keyword\">new</span> <span class=\"title class_\">WebSocket</span>(<span class=\"string\">&quot;wss://xxx.websocket.com&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">ws.<span class=\"property\">onopen</span> = <span class=\"keyword\">function</span>(<span class=\"params\">evt</span>) &#123; </span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Connection open...&quot;</span>); </span><br><span class=\"line\">ws.<span class=\"title function_\">send</span>(<span class=\"string\">&quot;fetch Data&quot;</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">ws.<span class=\"property\">onmessage</span> = <span class=\"keyword\">function</span>(<span class=\"params\">evt</span>) &#123;</span><br><span class=\"line\"><span class=\"comment\">// 可以在灌入数据前进行转码等操作</span></span><br><span class=\"line\">sourceBuffer.<span class=\"title function_\">appendBuffer</span>(evt.<span class=\"property\">data</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">ws.<span class=\"property\">onclose</span> = <span class=\"keyword\">function</span>(<span class=\"params\">evt</span>) &#123;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Connection closed.&quot;</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</code></pre>\n<p>通过MSE的方式我们可以将接收到的视频或者音频流进行端处理，配合WebWorker技术实现快速转码、支持多播，给我们无限的想象空间。</p>\n<ol start=\"5\">\n<li><strong>H.265 视频播放</strong>：H.265 是 ITU-T VCEG 继 H.264 之后所制定的新的视频编码标准。H.265 标准围绕着现有的视频编码标准 H.264，保留原来的某些技术，同时对一些相关的技术加以改进。新技术使用先进的技术用以改善码流、编码质量、延时和算法复杂度之间的关系，达到最优化设置。但是由于浏览器不支持 H265 格式的流，所以我们无法直接播放。这时候可以使用 MSE 的方式在 <code>sourceBuffer.appendBuffer(evt.data)</code> 前将 <code>evt.data</code> 使用 libde265.js 等转码库转码后给到 <code>sourceBuffer</code>。或者使用业界成熟的播放器进行播放，如淘系的 @ali&#x2F;videox 播放器。</li>\n</ol>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>越来越多的厂商更加偏向于H.265的编码格式，但是浏览器对该格式的支持度不友好的前提下我们不得不进行转码。使用MSE方式在浏览器端转码，则能借助GPU提高效率和降低延迟。但还是无法兼容所有的PC或者移动端浏览器，这条路还需要我们去继续探索。5G给互联网带来的福利不仅仅是在视频、直播的爆发，我相信web端图像视频技术也将突破现有的技术瓶颈，WebAssembly、硬件编码等图像渲染技术也将越来越丰富。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li>baike.baidu.com&#x2F;item&#x2F;ffmpeg</li>\n<li>github.com&#x2F;Bilibili&#x2F;fl…</li>\n<li>developer.mozilla.org&#x2F;zh-CN&#x2F;docs&#x2F;…</li>\n</ul>\n<p><strong>标签</strong>：JavaScript</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cm6rz8xo70000nwsydwkz6r1p","tag_id":"cm6x6e53s00016csyc2e12bir","_id":"cm6x6e53t00026csy36dq90ru"}],"Tag":[{"name":"分享","_id":"cm6x1kbuq0000fwsy8oqt60gi"},{"name":"视野分享","_id":"cm6x6e53s00016csyc2e12bir"}]}}